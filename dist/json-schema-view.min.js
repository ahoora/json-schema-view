/*!
 * json-schema-view
 * https://github.com/mohsen1/json-schema-view
 * Version: 0.3.2 - 2014-10-07T18:04:18.717Z
 * License: MIT
 */
"use strict";var module=angular.module("mohsen1.json-schema-view",["RecursionHelper"]);module.directive("jsonSchemaView",function(e){function r(e){function r(e){e&&(angular.isObject(e.items)?r(e.items):angular.isObject(e.properties)&&Object.keys(e.properties).forEach(function(s){e.properties[s].name=s,r(e.properties[s])}))}e.isCollapsed=!1,r(e.schema),"array"===e.schema.type&&(e.isArray=!0,e.schema=e.schema.items),e.toggle=function(){e.isCollapsed=!e.isCollapsed},e.isPrimitive=function(e){return["string","boolean","integer","int"].indexOf(e.type)>-1}}return{restrict:"E",templateUrl:"json-schema-view.html",replcae:!0,scope:{schema:"="},compile:function(s){return e.compile(s,r)}}}),module.directive("primitiveProperty",function(e){function r(e){e.isRequired=function(r,s){return s=s||e.$parent.schema,Array.isArray(s.required)&&r.name?s.required.indexOf(r.name)>-1:!1},e.has=function(e,r){return Object.keys(e).indexOf(r)>-1}}return{restrict:"E",templateUrl:"primitive.html",replcae:!0,scope:{property:"="},compile:function(s){return e.compile(s,r)}}}),angular.module("RecursionHelper",[]).factory("RecursionHelper",["$compile",function(e){return{compile:function(r,s){angular.isFunction(s)&&(s={post:s});var i,n=r.contents().remove();return{pre:s&&s.pre?s.pre:null,post:function(r,a){i||(i=e(n)),i(r,function(e){a.append(e)}),s&&s.post&&s.post.apply(null,arguments)}}}}}]),angular.module("mohsen1.json-schema-view").run(["$templateCache",function(e){e.put("json-schema-view.html",'<div class="json-schema-view" ng-class="{collapsed: isCollapsed}"><a class="toggler" ng-click="toggle()"></a> <span class="title" ng-click="toggle()"><span ng-if="isArray" class="array-of">[</span> {{schema.title}}</span> <span class="opening brace">{</span><div class="description">{{schema.description}}</div><div class="property" ng-repeat="property in schema.properties"><span class="name">{{property.name}}:</span><primitive-property ng-if="isPrimitive(property)" property="property"></primitive-property><json-schema-view ng-if="!isPrimitive(property)" schema="property"></json-schema-view></div><span class="closeing brace">}</span> <span ng-if="isArray" class="array-of">]</span></div>'),e.put("primitive.html",'<span class="primitive"><span class="type">{{property.type}}</span> <span class="required" ng-if="isRequired(property, schema)">*</span> <span class="format" ng-if="!isCollapsed && has(property, \'format\')">({{property.format}})</span> <span class="range minimum" ng-if="!isCollapsed && has(property, \'minimum\')">minimum:{{property.minimum}}</span> <span class="range maximum" ng-if="!isCollapsed && has(property, \'maximum\')">maximum:{{property.maximum}}</span></span>')}]);